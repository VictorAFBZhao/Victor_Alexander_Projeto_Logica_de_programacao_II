# -*- coding: utf-8 -*-
"""Victor_Alexander: Projeto Lógica de programação II.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F5-e8E4pRpwQXcsjgvyRnRJwttjGFM8d

# Projeto Lógica de programação II

Nesse projeto iremos focar no conhecimento adquirido durante o módulo de lógica de programação II.

Utilizaremos as estruturas de dados (tuplas, listas, dicionários) além da lógica de programação (if/else, while, e for), lembre-se das compreensões de listas e dicionários. E utilize as técnicas e algoritmos que achar necessário para realizar o projeto. A ideia é que no projeto sejam utilizados o maior número possível de recursos que foram aprendidos durante o módulo.

### Critérios de avaliação

Os seguintes itens serão avaliados:

1. Reprodutibilidade do código: seu código será executado e precisa gerar os mesmos resultados apresentados por você;

2. Clareza: seu código precisa ser claro e deve existir uma linha de raciocínio direta. Comente o código em pontos que julgar necessário para o entendimento total;

3. Utilização dos recursos aprendidos durante o módulo.


### Informações gerais

- O projeto pode ser desenvolvido individualmente ou em grupo

- Entrega (em definição).

Anexar, na entrega, o código (notebook ou script python) desenvolvido e os arquivos gerados.

Nesse projeto você deverá desenvolver um programa que permita aceitar ações da pessoa usuária (input) para o cadastro ou exclusão de uma venda realizada por uma loja. Atenção: Em uma venda, podemos ter mais de um produto vendido. Caso a venda seja excluída, registrar a informação "Venda cancelada".

### Tarefas:

1. Criar uma estrutura de dados que armazene as vendas realizadas em uma loja.

2. Implemente uma função que solicite ao usuário a ação desejada (Incluir ou Excluir) um item da lista.

    Informações sobre a venda que devem constar:

    - ID (incremental)
    - Nome do produto
    - Valor do produto
    - Nome do vendedor
    - CPF do comprador
    - Data da venda
    - Informações opcionais

3. Crie uma função que calcule o valor total e o valor médio das vendas em um determinado mês.

4. Crie uma função para descobrir quem foi o vendedor que obteve o maior faturamento do mês. A função deve permitir ao usuário definir o mês e o ano desejados.

5. Crie uma função para descobrir qual foi o produto mais vendido no mês.

6. Crie uma função para salvar os dados em um arquivo.

7. Crie uma função para converter os valores dos produtos em Dólar e salvar em um novo arquivo (Utilizando Função geradora).
"""


import csv

lista_vendas = [  # Define uma lista de vendas lista_vendas, contendo dicionários que representam as informações de cada venda.
    {"ID": 1, "Nome do produto": "Produto A", "Valor do produto": 100.0, "Nome do vendedor": "Vendedor 1",
        "CPF do comprador": "111.111.111-11", "Data da venda": "2023-01-05", "Informações opcionais": "Opção 1"},
    {"ID": 2, "Nome do produto": "Produto B", "Valor do produto": 200.0, "Nome do vendedor": "Vendedor 2",
        "CPF do comprador": "222.222.222-22", "Data da venda": "2023-01-10", "Informações opcionais": "Opção 2"},
    {"ID": 3, "Nome do produto": "Produto C", "Valor do produto": 150.0, "Nome do vendedor": "Vendedor 3",
        "CPF do comprador": "333.333.333-33", "Data da venda": "2023-01-15", "Informações opcionais": "Opção 3"},
    {"ID": 4, "Nome do produto": "Produto D", "Valor do produto": 80.0, "Nome do vendedor": "Vendedor 4",
        "CPF do comprador": "444.444.444-44", "Data da venda": "2023-01-20", "Informações opcionais": "Opção 4"},
    {"ID": 5, "Nome do produto": "Produto E", "Valor do produto": 120.0, "Nome do vendedor": "Vendedor 5",
        "CPF do comprador": "555.555.555-55", "Data da venda": "2023-01-25", "Informações opcionais": "Opção 5"},
    {"ID": 6, "Nome do produto": "Produto F", "Valor do produto": 250.0, "Nome do vendedor": "Vendedor 6",
        "CPF do comprador": "666.666.666-66", "Data da venda": "2023-02-05", "Informações opcionais": "Opção 6"},
    {"ID": 7, "Nome do produto": "Produto G", "Valor do produto": 180.0, "Nome do vendedor": "Vendedor 7",
        "CPF do comprador": "777.777.777-77", "Data da venda": "2023-02-10", "Informações opcionais": "Opção 7"},
    {"ID": 8, "Nome do produto": "Produto H", "Valor do produto": 300.0, "Nome do vendedor": "Vendedor 8",
        "CPF do comprador": "888.888.888-88", "Data da venda": "2023-02-15", "Informações opcionais": "Opção 8"},
    {"ID": 9, "Nome do produto": "Produto I", "Valor do produto": 90.0, "Nome do vendedor": "Vendedor 9",
        "CPF do comprador": "999.999.999-99", "Data da venda": "2023-02-20", "Informações opcionais": "Opção 9"},
    {"ID": 10, "Nome do produto": "Produto J", "Valor do produto": 200.0, "Nome do vendedor": "Vendedor 10",
        "CPF do comprador": "000.000.000-00", "Data da venda": "2023-02-25", "Informações opcionais": "Opção 10"},
]


def incluir_item():
    # Permite adicionar uma nova venda à lista de vendas.
    # Gera um novo ID incremental para a nova venda.
    novo_id = lista_vendas[-1]['ID'] + 1 if lista_vendas else 1
    item = {
        'ID': novo_id,
        'Nome do produto': input("Nome do produto: "),
        'Valor do produto': float(input("Valor do produto: ")),
        'Nome do vendedor': input("Nome do vendedor: "),
        'CPF do comprador': input("CPF do comprador: "),
        'Data da venda': input("Data da venda (AAAA-MM-DD): "),
        'Informações opcionais': input("Informações opcionais: ")
    }
    lista_vendas.append(item)  # Adiciona a nova venda à lista de vendas.


def excluir_item():
    # Permite remover uma venda da lista com base no ID informado.
    id_item = int(input("Digite o ID do item que deseja excluir: "))
    for venda in lista_vendas:
        if venda['ID'] == id_item:
            lista_vendas.remove(venda)
            print("Item excluído com sucesso!")
            return
    print("Item não encontrado.")


def calcular_valor_total_e_medio_mes():
    # Calcula o valor total e o valor médio das vendas para um mês e ano específico.
    mes_ano = input("Digite o mês e o ano no formato MM-AAAA: ")
    vendas_no_mes = [venda for venda in lista_vendas if venda['Data da venda']
                     [5:7] == mes_ano[:2] and venda['Data da venda'][0:4] == mes_ano[3:]]
    valor_total = sum(venda['Valor do produto'] for venda in vendas_no_mes)
    valor_medio = valor_total / len(vendas_no_mes) if vendas_no_mes else 0
    print(f"Valor total das vendas em {mes_ano}: R$ {valor_total:.2f}")
    print(f"Valor médio das vendas em {mes_ano}: R$ {valor_medio:.2f}")


def maior_faturamento_mes():
    # Identifica o vendedor com maior faturamento em um mês e ano específico.
    mes_ano = input("Digite o mês e o ano no formato MM-AAAA: ")
    vendas_no_mes = [venda for venda in lista_vendas if venda['Data da venda']
                     [5:7] == mes_ano[:2] and venda['Data da venda'][0:4] == mes_ano[3:]]
    if not vendas_no_mes:
        print(f"Nenhuma venda encontrada para o mês {mes_ano}.")
        return
    vendas_por_vendedor = {}
    for venda in vendas_no_mes:
        vendedor = venda['Nome do vendedor']
        valor_venda = venda['Valor do produto']
        vendas_por_vendedor[vendedor] = vendas_por_vendedor.get(
            vendedor, 0) + valor_venda
    vendedor_maior_faturamento = max(
        vendas_por_vendedor, key=vendas_por_vendedor.get)
    print(
        f"Vendedor com maior faturamento em {mes_ano}: {vendedor_maior_faturamento}, Faturamento: R$ {vendas_por_vendedor[vendedor_maior_faturamento]:.2f}")


def produto_mais_vendido_mes():
    # Identifica o produto mais vendido em um mês e ano específico.
    mes_ano = input("Digite o mês e o ano no formato MM-AAAA: ")
    vendas_no_mes = [venda for venda in lista_vendas if venda['Data da venda']
                     [5:7] == mes_ano[:2] and venda['Data da venda'][0:4] == mes_ano[3:]]
    if not vendas_no_mes:
        print(f"Nenhuma venda encontrada para o mês {mes_ano}.")
        return
    produtos_vendidos = {}
    for venda in vendas_no_mes:
        produto = venda['Nome do produto']
        produtos_vendidos[produto] = produtos_vendidos.get(produto, 0) + 1
    produto_mais_vendido = max(produtos_vendidos, key=produtos_vendidos.get)
    print(
        f"Produto mais vendido em {mes_ano}: {produto_mais_vendido}, Quantidade vendida: {produtos_vendidos[produto_mais_vendido]}")


def salvar_dados_em_arquivo():
    # Salva os dados da lista de vendas em um arquivo CSV chamado dados_vendas.csv.
    try:
        with open('dados_vendas.csv', 'w', newline='') as csvfile:
            fieldnames = ['ID', 'Nome do produto', 'Valor do produto', 'Nome do vendedor',
                          'CPF do comprador', 'Data da venda', 'Informações opcionais']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            for venda in lista_vendas:
                writer.writerow(venda)
    except Exception as e:
        print(f"Erro ao salvar os dados em arquivo: {e}")


def converter_valores_para_dolar():
    # Converte os valores dos produtos em Dólar e salva em um novo arquivo CSV chamado dados_vendas_dolar.csv.
    try:
        taxa_dolar = float(
            input("Digite a taxa de conversão de real para dólar: "))
        with open('dados_vendas_dolar.csv', 'w', newline='') as csvfile:
            fieldnames = ['ID', 'Nome do produto', 'Valor do produto em dólar',
                          'Nome do vendedor', 'CPF do comprador', 'Data da venda', 'Informações opcionais']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for venda in lista_vendas:
                venda_em_dolar = venda.copy()
                venda_em_dolar['Valor do produto em dólar'] = venda_em_dolar['Valor do produto'] / taxa_dolar
                # Remove o valor em real, já que agora temos o valor em dólar
                del venda_em_dolar['Valor do produto']
                writer.writerow(venda_em_dolar)
    except ValueError:
        print("Valor inválido. Certifique-se de que a taxa de conversão seja um número válido.")
    except Exception as e:
        print(
            f"Erro ao converter os valores para dólar e salvar em arquivo: {e}")


if __name__ == "__main__":
    # O bloco a seguir é executado quando o programa é iniciado.
    # Ele cria um loop infinito que exibe o menu de opções e permite que o usuário interaja com o programa.
    while True:
        print("\nOpções:")
        print("1 - Incluir item")
        print("2 - Excluir item")
        print("3 - Calcular valor total e médio das vendas em um mês")
        print("4 - Vendedor com maior faturamento em um mês")
        print("5 - Produto mais vendido em um mês")
        print("6 - Salvar dados em arquivo")
        print("7 - Converter valores para dólar e salvar em arquivo")
        print("0 - Sair")

        # Solicita ao usuário que digite a opção desejada.
        opcao = int(input("Digite a opção desejada: "))

        # Verifica qual opção foi escolhida e chama a função correspondente.
        if opcao == 1:
            incluir_item()
        elif opcao == 2:
            excluir_item()
        elif opcao == 3:
            calcular_valor_total_e_medio_mes()
        elif opcao == 4:
            maior_faturamento_mes()
        elif opcao == 5:
            produto_mais_vendido_mes()
        elif opcao == 6:
            salvar_dados_em_arquivo()
        elif opcao == 7:
            converter_valores_para_dolar()
        elif opcao == 0:
            # Se o usuário digitar 0, o loop é quebrado e o programa é encerrado.
            break
        else:
            # Caso o usuário digite uma opção inválida, essa mensagem é exibida.
            print("Opção inválida. Tente novamente.")
